import Lesson from '../models/lesson.js';
import Course from '../models/course.js';

// @desc    T·∫°o b√†i h·ªçc m·ªõi
// @route   POST /api/lessons
// @access  Private (Admin/Teacher)
export const createLesson = async (req, res) => {
    try {
        const { title, description, course, contentType, contentUrl, contentText, order, duration } = req.body;

        // Ki·ªÉm tra kh√≥a h·ªçc t·ªìn t·∫°i
        const courseExists = await Course.findById(course);
        if (!courseExists) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc.' });
        }

        // Ki·ªÉm tra tr√πng th·ª© t·ª±
        const orderExists = await Lesson.findOne({ course, order });
        if (orderExists) {
            return res.status(400).json({ message: `Th·ª© t·ª± ${order} ƒë√£ t·ªìn t·∫°i trong kh√≥a h·ªçc.` });
        }

        // T·∫°o b√†i h·ªçc m·ªõi
        const lesson = await Lesson.create({
            title,
            description,
            course,
            contentType,
            contentUrl,
            contentText,
            order,
            duration,
        });

        res.status(201).json(lesson);
    } catch (error) {
        console.error('L·ªói khi t·∫°o b√†i h·ªçc:', error);
        res.status(500).json({ message: 'Kh√¥ng th·ªÉ t·∫°o b√†i h·ªçc', error: error.message });
    }
};

// @desc    L·∫•y t·∫•t c·∫£ b√†i h·ªçc theo kh√≥a h·ªçc
// @route   GET /api/lessons/course/:courseId
// @access  Public
export const getLessonsByCourse = async (req, res) => {
    try {
        const lessons = await Lesson.find({ course: req.params.courseId }).sort('order');

        if (!lessons || lessons.length === 0) {
            const course = await Course.findById(req.params.courseId);
            if (!course) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc.' });
            return res.status(200).json([]);
        }

        res.status(200).json(lessons);
    } catch (error) {
        console.error('L·ªói khi l·∫•y b√†i h·ªçc:', error);
        res.status(500).json({ message: 'Kh√¥ng th·ªÉ l·∫•y b√†i h·ªçc', error: error.message });
    }
};
export const getAllLessons = async (req, res) => {
    try {
        const lessons = await Lesson.find()
            .sort({ createdAt: -1 }) // s·∫Øp x·∫øp m·ªõi nh·∫•t l√™n ƒë·∫ßu (t√πy ch·ªçn)
            .populate('course', 'title'); // l·∫•y th√¥ng tin kh√≥a h·ªçc

        res.status(200).json(lessons);
    } catch (error) {
        console.error('L·ªói khi l·∫•y t·∫•t c·∫£ b√†i h·ªçc:', error);
        res.status(500).json({ message: 'Kh√¥ng th·ªÉ l·∫•y b√†i h·ªçc', error: error.message });
    }
};
// @desc    L·∫•y chi ti·∫øt m·ªôt b√†i h·ªçc
// @route   GET /api/lessons/:id
// @access  Public
export const getLessonById = async (req, res) => {
    try {
        const lesson = await Lesson.findById(req.params.id).populate('course', 'title');
        if (!lesson) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
        res.status(200).json(lesson);
    } catch (error) {
        console.error('L·ªói khi l·∫•y b√†i h·ªçc:', error);
        res.status(500).json({ message: 'Kh√¥ng th·ªÉ l·∫•y b√†i h·ªçc', error: error.message });
    }
};

// @desc    C·∫≠p nh·∫≠t b√†i h·ªçc
// @route   PUT /api/lessons/:id
// @access  Private
export const updateLesson = async (req, res) => {
    try {
        const {
            title,
            description,
            contentType,
            contentUrl,
            contentText,
            order,
            duration,
            course, // üëà TH√äM N√ÄY
        } = req.body;

        const lesson = await Lesson.findById(req.params.id);
        if (!lesson) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });

        // N·∫øu ƒë·ªïi th·ª© t·ª± th√¨ ki·ªÉm tra tr√πng trong kh√≥a h·ªçc m·ªõi (n·∫øu c√≥)
        const newCourse = course || lesson.course;
        if (order && order !== lesson.order) {
            const orderExists = await Lesson.findOne({
                course: newCourse,
                order,
                _id: { $ne: lesson._id }, // kh√¥ng t√≠nh ch√≠nh n√≥
            });

            if (orderExists) {
                return res.status(400).json({ message: `Th·ª© t·ª± ${order} ƒë√£ t·ªìn t·∫°i trong kh√≥a h·ªçc.` });
            }

            lesson.order = order;
        }

        // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng
        lesson.title = title || lesson.title;
        lesson.description = description || lesson.description;
        lesson.contentType = contentType || lesson.contentType;
        lesson.contentUrl = contentUrl || lesson.contentUrl;
        lesson.contentText = contentText || lesson.contentText;
        lesson.duration = duration ?? lesson.duration;
        lesson.course = course || lesson.course; // üëà C·∫¨P NH·∫¨T KH√ìA H·ªåC M·ªöI

        const updated = await lesson.save();
        res.status(200).json(updated);
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t b√†i h·ªçc:', error);
        res.status(500).json({ message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b√†i h·ªçc', error: error.message });
    }
};

// @desc    X√≥a b√†i h·ªçc
// @route   DELETE /api/lessons/:id
// @access  Private
export const deleteLesson = async (req, res) => {
    try {
        const lesson = await Lesson.findById(req.params.id);
        if (!lesson) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });

        await Lesson.deleteOne({ _id: req.params.id });
        res.status(200).json({ message: 'B√†i h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng' });
    } catch (error) {
        console.error('L·ªói khi x√≥a b√†i h·ªçc:', error);
        res.status(500).json({ message: 'Kh√¥ng th·ªÉ x√≥a b√†i h·ªçc', error: error.message });
    }
};
